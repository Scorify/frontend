scalar JSON
scalar Time

directive @isAuthenticated on FIELD_DEFINITION
directive @hasRole(roles: [Role]) on FIELD_DEFINITION

enum Role {
  admin
  user
}

enum StatusEnum {
  up
  down
  unknown
}

enum NotificationType {
  default
  error
  info
  success
  warning
}

enum EngineState {
  paused
  waiting
  running
  stopping
}

type LoginOutput {
  name: String!
  token: String!
  expires: Int!
  path: String!
  domain: String!
  secure: Boolean!
  httpOnly: Boolean!
}

type User {
  id: ID!
  username: String!
  role: Role!
  number: Int
  create_time: Time!
  update_time: Time!
  configs: [Config!]! @isAuthenticated
  statuses: [Status!]! @isAuthenticated
  score_caches: [ScoreCache!]! @isAuthenticated
}

type Source {
  name: String!
  schema: String!
}

type CheckConfig {
  id: ID!
  config: JSON!
  create_time: Time!
  update_time: Time!
  check_id: ID!
  user_id: ID!
  check: Check!
  user: User!
}

type Check {
  id: ID!
  name: String!
  source: Source!
  weight: Int!
  config: JSON! @hasRole(roles: [admin])
  editable_fields: [String!]! @hasRole(roles: [admin])
  create_time: Time!
  update_time: Time!
  configs: [CheckConfig!]!
  statuses: [Status!]!
}

type Config {
  id: ID!
  config: JSON!
  check: Check!
  user: User!
}

type Status {
  id: ID!
  error: String
  status: StatusEnum!
  points: Int!
  check_id: ID!
  round_id: ID!
  user_id: ID!
  create_time: Time!
  update_time: Time!
  check: Check!
  round: Round!
  user: User!
}

type ScoreCache {
  id: ID!
  points: Int!
  round_id: ID!
  user_id: ID!
  create_time: Time!
  update_time: Time!
  round: Round!
  user: User!
}

type Round {
  id: ID!
  number: Int!
  complete: Boolean!
  create_time: Time!
  update_time: Time!
  statuses: [Status!]!
  score_caches: [ScoreCache!]!
}

type Notification {
  message: String!
  type: NotificationType!
}

type Subscription {
  globalNotification: Notification!
  engineState: EngineState!
  statusStream: [Status]!
}

type Query {
  me: User!
  users: [User!]! @hasRole(roles: [admin])

  sources: [Source!]!
  source(name: String!): Source!

  checks: [Check!]! @hasRole(roles: [admin])
  check(id: ID, name: String): Check!

  configs: [Config!]! @isAuthenticated
  config(id: ID!): Config! @isAuthenticated
}

type Mutation {
  login(username: String!, password: String!): LoginOutput!
  adminLogin(id: ID!): LoginOutput! @hasRole(roles: [admin])
  adminBecome(id: ID!): LoginOutput! @hasRole(roles: [admin])
  changePassword(oldPassword: String!, newPassword: String!): Boolean!
    @isAuthenticated

  createCheck(
    name: String!
    source: String!
    weight: Int!
    config: JSON!
    editable_fields: [String!]!
  ): Check! @hasRole(roles: [admin])
  updateCheck(
    id: ID!
    name: String
    weight: Int
    config: JSON
    editable_fields: [String!]
  ): Check! @hasRole(roles: [admin])
  deleteCheck(id: ID!): Boolean! @hasRole(roles: [admin])

  createUser(
    username: String!
    password: String!
    role: Role!
    number: Int
  ): User! @hasRole(roles: [admin])
  updateUser(id: ID!, username: String, password: String, number: Int): User!
    @hasRole(roles: [admin])
  deleteUser(id: ID!): Boolean! @hasRole(roles: [admin])

  editConfig(id: ID!, config: JSON!): Config! @isAuthenticated

  sendGlobalNotification(message: String!, type: NotificationType!): Boolean!
    @hasRole(roles: [admin])

  startEngine: Boolean! @hasRole(roles: [admin])
  stopEngine: Boolean! @hasRole(roles: [admin])
}
